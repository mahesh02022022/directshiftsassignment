[{"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\index.tsx":"1","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\serviceWorker.ts":"2","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\App.tsx":"3","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\store.ts":"4","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\appbar\\AppBar.tsx":"5","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\dashboard\\Dashboard.tsx":"6","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\routes\\PublicOnlyRoute.tsx":"7","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\routes\\PrivateRoute.tsx":"8","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\Login.tsx":"9","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\Signup.tsx":"10","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\PersistLogin.tsx":"11","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\Logout.tsx":"12","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\UpdateProfile.tsx":"13","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\sessionSlice.tsx":"14","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\counter\\counterSlice.ts":"15","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\api\\sessionAPI.ts":"16","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\counter\\counterAPI.ts":"17","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\api\\axios.ts":"18"},{"size":735,"mtime":1652866626802,"results":"19","hashOfConfig":"20"},{"size":5436,"mtime":1652866626802,"results":"21","hashOfConfig":"20"},{"size":2201,"mtime":1653164127123,"results":"22","hashOfConfig":"20"},{"size":557,"mtime":1652866626802,"results":"23","hashOfConfig":"20"},{"size":6347,"mtime":1653239710121,"results":"24","hashOfConfig":"20"},{"size":962,"mtime":1653239488792,"results":"25","hashOfConfig":"20"},{"size":889,"mtime":1652866626786,"results":"26","hashOfConfig":"20"},{"size":875,"mtime":1652866626786,"results":"27","hashOfConfig":"20"},{"size":9133,"mtime":1653239766191,"results":"28","hashOfConfig":"20"},{"size":10140,"mtime":1653157067156,"results":"29","hashOfConfig":"20"},{"size":965,"mtime":1652866626802,"results":"30","hashOfConfig":"20"},{"size":617,"mtime":1652866626786,"results":"31","hashOfConfig":"20"},{"size":9922,"mtime":1653239350966,"results":"32","hashOfConfig":"20"},{"size":10992,"mtime":1652866626802,"results":"33","hashOfConfig":"20"},{"size":3074,"mtime":1652866626786,"results":"34","hashOfConfig":"20"},{"size":2927,"mtime":1652866626786,"results":"35","hashOfConfig":"20"},{"size":220,"mtime":1652866626786,"results":"36","hashOfConfig":"20"},{"size":232,"mtime":1652866626786,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1sy0yuh",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"41"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\index.tsx",[],[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\serviceWorker.ts",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\App.tsx",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\store.ts",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\appbar\\AppBar.tsx",["99"],[],"import * as React from \"react\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport { To, useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\n\r\nconst pages = [\"Products\", \"Pricing\", \"Blog\"];\r\nconst settings = [\"Profile\", \"Account\", \"Dashboard\", \"Logout\"];\r\n\r\nconst ResponsiveAppBar = () => {\r\n  const [anchorElNav, setAnchorElNav] = React.useState<null | HTMLElement>(\r\n    null\r\n  );\r\n  const [anchorElUser, setAnchorElUser] = React.useState<null | HTMLElement>(\r\n    null\r\n  );\r\n  const navigate = useNavigate();\r\n  const accessToken = useSelector(\r\n    (state: RootState) => state.session.accessToken\r\n  );\r\n  const loading = useSelector((state: RootState) => state.session.loading);\r\n  const currentUser = useSelector(\r\n    (state: RootState) => state.session.currentUser\r\n  );\r\n\r\n  const handleOpenNavMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElNav(event.currentTarget);\r\n  };\r\n  const handleOpenUserMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  function handleNavigate(\r\n    route: To,\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) {\r\n    event?.preventDefault();\r\n    navigate(route);\r\n  }\r\n\r\n  function handleLogout(event: React.MouseEvent<HTMLLIElement, MouseEvent>) {\r\n    event?.preventDefault();\r\n    handleCloseUserMenu();\r\n    navigate(\"/logout\");\r\n  }\r\n\r\n  function handleUpdateProfileAccount(\r\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>\r\n  ) {\r\n    event?.preventDefault();\r\n    handleCloseUserMenu();\r\n    navigate(\"/update-profile\");\r\n  }\r\n\r\n  let sessionLinks;\r\n  if (accessToken) {\r\n    sessionLinks = (\r\n      <Box sx={{ flexGrow: 0 }}>\r\n        <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\r\n          <Typography marginRight={2} marginTop={1} textAlign=\"center\">\r\n            {currentUser?.email}\r\n          </Typography>\r\n          <Tooltip title=\"Open settings\">\r\n            <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n              <Avatar alt=\"Mahesh\" src=\"/static/images/avatar/2.jpg\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Box>\r\n        <Menu\r\n          sx={{ mt: \"45px\" }}\r\n          id=\"menu-appbar\"\r\n          anchorEl={anchorElUser}\r\n          anchorOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"right\",\r\n          }}\r\n          keepMounted\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"right\",\r\n          }}\r\n          open={Boolean(anchorElUser)}\r\n          onClose={handleCloseUserMenu}\r\n        >\r\n          <MenuItem onClick={(event) => handleUpdateProfileAccount(event)}>\r\n            <Typography textAlign=\"center\">Update Profile</Typography>\r\n          </MenuItem>\r\n          <MenuItem onClick={(event) => handleLogout(event)}>\r\n            <Typography textAlign=\"center\">Logout</Typography>\r\n          </MenuItem>\r\n        </Menu>\r\n      </Box>\r\n    );\r\n  } else if (!accessToken && !loading) {\r\n    sessionLinks = (\r\n      <>\r\n        <Button\r\n          onClick={(event) => handleNavigate(\"/signup\", event)}\r\n          sx={{ my: 2, color: \"white\", display: \"block\" }}\r\n        >\r\n          Create Account\r\n        </Button>\r\n        <Button\r\n          onClick={(event) => handleNavigate(\"/login\", event)}\r\n          sx={{ my: 2, color: \"white\", display: \"block\" }}\r\n        >\r\n          Login\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <img\r\n            className=\"w-44 object-contain cursor-pointer\"\r\n            src=\"https://mahesh02022022.github.io/newportfolio/images/logo.png\"\r\n            alt=\"Mahesh!\"\r\n          />\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleOpenNavMenu}\r\n              color=\"inherit\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElNav}\r\n              anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"left\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\",\r\n              }}\r\n              open={Boolean(anchorElNav)}\r\n              onClose={handleCloseNavMenu}\r\n              sx={{\r\n                display: { xs: \"block\", md: \"none\" },\r\n              }}\r\n            >\r\n              {pages.map((page) => (\r\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\r\n                  <Typography textAlign=\"center\">{page}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n          {/* <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}\r\n          >\r\n            Wishlist\r\n          </Typography> */}\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\r\n            {/* <Button\r\n              onClick={(event) => handleNavigate(\"/\", event)}\r\n              sx={{ my: 2, color: \"white\", display: \"block\" }}\r\n            >\r\n              Home\r\n            </Button> */}\r\n          </Box>\r\n          {sessionLinks}\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default ResponsiveAppBar;\r\n","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\dashboard\\Dashboard.tsx",["100","101","102"],[],"import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\n\r\nfunction Dashboard() {\r\n  const currentUser = useSelector(\r\n    (state: RootState) => state.session.currentUser\r\n  );\r\n  const accessToken = useSelector(\r\n    (state: RootState) => state.session.accessToken\r\n  );\r\n  const refreshToken = useSelector(\r\n    (state: RootState) => state.session.refreshToken\r\n  );\r\n  return (\r\n    <section>\r\n      <br></br>\r\n      <h1 align=\"center\">Dashboard Home Page</h1>\r\n      {/* <ul>\r\n        <li>\r\n          Current User\r\n          <ul>\r\n            <li>Id: {currentUser?.id}</li>\r\n            <li>Email: {currentUser?.email}</li>\r\n            <li>Role: {currentUser?.role}</li>\r\n            <li>Created At: {currentUser?.createdAt}</li>\r\n          </ul>\r\n        </li>\r\n        <li>Access Token: {accessToken}</li>\r\n        <li>Refresh Token: {refreshToken}</li>\r\n      </ul> */}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\routes\\PublicOnlyRoute.tsx",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\routes\\PrivateRoute.tsx",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\Login.tsx",["103","104","105","106","107","108"],[],"import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Container,\r\n  Divider,\r\n  FormControl,\r\n  FormGroup,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { RootState } from \"../../store\";\r\nimport { loginUser, resetErrorState } from \"./sessionSlice\";\r\n\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { green } from \"@mui/material/colors\";\r\n\r\nfunction Login() {\r\n  const emailRef = useRef<HTMLInputElement>();\r\n  const passwordRef = useRef<HTMLInputElement>();\r\n  const errorMessages = useSelector(\r\n    (state: RootState) => state.session.errorMessages\r\n  );\r\n  const [errors, setErrors] = useState<Array<string>>([]);\r\n  const [showPassword, setShowPassword] = useState<boolean>(false);\r\n  const loading = false;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = createTheme();\r\n\r\n  useEffect(() => {\r\n    emailRef?.current?.focus();\r\n    if (errorMessages.length > 0) {\r\n      setErrors(errorMessages);\r\n      dispatch(resetErrorState());\r\n    }\r\n  }, []);\r\n\r\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    setErrors([]);\r\n    if (\r\n      emailRef?.current === undefined ||\r\n      emailRef.current.value === \"\" ||\r\n      passwordRef?.current === undefined ||\r\n      passwordRef.current.value === \"\"\r\n    ) {\r\n      return setErrors([\"Please fill out all fields\"]);\r\n    }\r\n    const payload = {\r\n      email: emailRef.current.value,\r\n      password: passwordRef.current.value,\r\n    };\r\n    const response = (await dispatch(loginUser(payload))) as any;\r\n    console.log(response);\r\n    if (errorMessages.length === 0) {\r\n      navigate(\"/\");\r\n    } else {\r\n      return setErrors(errorMessages);\r\n    }\r\n  }\r\n\r\n  const passwordInput = (\r\n    <OutlinedInput\r\n      id=\"password\"\r\n      label=\"Password\"\r\n      variant=\"Password\"\r\n      type={showPassword ? \"text\" : \"password\"}\r\n      inputRef={passwordRef}\r\n      endAdornment={\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            aria-label=\"toggle password visibility\"\r\n            onClick={() => setShowPassword(!showPassword)}\r\n            onMouseDown={() => setShowPassword(!showPassword)}\r\n            edge=\"end\"\r\n          >\r\n            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      }\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <Box\r\n            sx={{\r\n              marginTop: 8,\r\n              padding: \"10,10\",\r\n              display: \"block\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div className=\"flex items-center\">\r\n              <Container maxWidth=\"xl\">\r\n                <div className=\"left-px:100px\"></div>\r\n                <div>\r\n                  <Card sx={{ boxShadow: 4, maxWidth: \"md\" }}>\r\n                    <CardContent>\r\n                      <Typography component=\"h5\" variant=\"h5\" align=\"center\">\r\n                        <LockOutlinedIcon />\r\n                        Sign in\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n                <div></div>\r\n              </Container>\r\n            </div>\r\n\r\n            <section style={{ marginTop: \"0em\" }}>\r\n              <Container maxWidth=\"xl\">\r\n                <Card sx={{ boxShadow: 4, maxWidth: \"md\" }}>\r\n                  <CardContent>\r\n                    <Container maxWidth=\"sm\">\r\n                      <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h5\"\r\n                        align=\"center\"\r\n                      ></Typography>\r\n\r\n                      {errors.length > 0 ? (\r\n                        <Alert severity=\"error\" aria-live=\"assertive\">\r\n                          {errors.map((error, index) => {\r\n                            return <p key={`alert-${index}`}>{error}</p>;\r\n                          })}\r\n                        </Alert>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                      <form onSubmit={handleSubmit}>\r\n                        <FormGroup\r\n                          row={true}\r\n                          id=\"email-group\"\r\n                          sx={{ marginTop: \"1em\" }}\r\n                        >\r\n                          <FormControl fullWidth>\r\n                            <InputLabel\r\n                              required\r\n                              htmlFor=\"email\"\r\n                              id=\"email-label\"\r\n                            >\r\n                              Email Address\r\n                            </InputLabel>\r\n                            <Input\r\n                              id=\"email\"\r\n                              type=\"email\"\r\n                              inputRef={emailRef}\r\n                            />\r\n\r\n                            {/* <TextField\r\n                              margin=\"normal\"\r\n                              required\r\n                              fullWidth\r\n                              id=\"email\"\r\n                              label=\"Email Address\"\r\n                              name=\"email\"\r\n                              autoComplete=\"email\"\r\n                              inputRef={emailRef}\r\n                              autoFocus\r\n                            /> */}\r\n                          </FormControl>\r\n                        </FormGroup>\r\n                        <FormGroup\r\n                          row={true}\r\n                          id=\"password-group\"\r\n                          sx={{ marginTop: \"1em\" }}\r\n                        >\r\n                          <FormControl fullWidth>\r\n                            <InputLabel\r\n                              required\r\n                              htmlFor=\"password\"\r\n                              id=\"password-label\"\r\n                            >\r\n                              Password\r\n                            </InputLabel>\r\n                            {passwordInput}\r\n                            {/* <TextField\r\n                              margin=\"normal\"\r\n                              required\r\n                              fullWidth\r\n                              name=\"password\"\r\n                              label=\"Password\"\r\n                              type=\"password\"\r\n                              id=\"password-label\"\r\n                              autoComplete=\"current-password\"\r\n                            /> */}\r\n                          </FormControl>\r\n                        </FormGroup>\r\n                        <FormGroup\r\n                          row={true}\r\n                          id=\"submit-group\"\r\n                          sx={{ marginTop: \"1em\" }}\r\n                        >\r\n                          <FormControl fullWidth>\r\n                            <Button\r\n                              disabled={loading}\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              type=\"submit\"\r\n                              id=\"submit-button\"\r\n                            >\r\n                              Login\r\n                            </Button>\r\n                          </FormControl>\r\n                        </FormGroup>\r\n                      </form>\r\n                    </Container>\r\n                  </CardContent>\r\n                  <Divider light={false} />\r\n                  <CardActions\r\n                    sx={{ marginTop: \"1em\", justifyContent: \"center\" }}\r\n                    disableSpacing\r\n                  >\r\n                    <Box>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        color=\"text.secondary\"\r\n                        align=\"center\"\r\n                      >\r\n                        <Link to=\"/forgot-password\">Forgot Password?</Link>\r\n                      </Typography>\r\n                      <Link to=\"/signup\">Create an Account!</Link>\r\n                    </Box>\r\n                  </CardActions>\r\n                </Card>\r\n              </Container>\r\n            </section>\r\n\r\n            {/* closing tags */}\r\n          </Box>\r\n        </Container>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\Signup.tsx",["109","110","111","112","113","114"],[],"import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Container,\r\n  Divider,\r\n  FormControl,\r\n  FormGroup,\r\n  FormHelperText,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { RootState } from \"../../store\";\r\nimport { resetErrorState, signUpUser } from \"./sessionSlice\";\r\n\r\nimport Avatar from \"@mui/material/Avatar\";\r\n\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nconst theme = createTheme();\r\nfunction Signup() {\r\n  const emailRef = useRef<HTMLInputElement>();\r\n  const passwordRef = useRef<HTMLInputElement>();\r\n  const passwordConfirmationRef = useRef<HTMLInputElement>();\r\n  const errorMessages = useSelector(\r\n    (state: RootState) => state.session.errorMessages\r\n  );\r\n\r\n  const [errors, setErrors] = useState<Array<string>>([]);\r\n  const [showPassword, setShowPassword] = useState<boolean>(false);\r\n  const loading = false;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    emailRef?.current?.focus();\r\n    if (errorMessages !== undefined) {\r\n      setErrors(errorMessages);\r\n      dispatch(resetErrorState());\r\n    }\r\n  }, []);\r\n\r\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    setErrors([]);\r\n    if (\r\n      emailRef?.current === undefined ||\r\n      emailRef.current.value === \"\" ||\r\n      passwordRef?.current === undefined ||\r\n      passwordRef.current.value === \"\" ||\r\n      passwordConfirmationRef?.current === undefined ||\r\n      passwordConfirmationRef.current.value === \"\"\r\n    ) {\r\n      return setErrors([\"Please fill out all fields\"]);\r\n    }\r\n    if (passwordRef.current.value !== passwordConfirmationRef.current.value) {\r\n      return setErrors([\"Passwords do not match\"]);\r\n    }\r\n    const payload = {\r\n      email: emailRef.current.value,\r\n      password: passwordRef.current.value,\r\n    };\r\n    const response = (await dispatch(signUpUser(payload))) as any;\r\n\r\n    console.log(response);\r\n    if (errorMessages.length > 0) {\r\n      navigate(\"/\");\r\n    } else {\r\n      return setErrors(errorMessages);\r\n    }\r\n  }\r\n\r\n  const passwordInput = (\r\n    <OutlinedInput\r\n      id=\"password\"\r\n      label=\"Password\"\r\n      variant=\"Password\"\r\n      type={showPassword ? \"text\" : \"password\"}\r\n      inputRef={passwordRef}\r\n      endAdornment={\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            aria-label=\"toggle password visibility\"\r\n            onClick={() => setShowPassword(!showPassword)}\r\n            onMouseDown={() => setShowPassword(!showPassword)}\r\n            edge=\"end\"\r\n          >\r\n            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      }\r\n    />\r\n  );\r\n\r\n  const passwordConfirmationInput = (\r\n    <OutlinedInput\r\n      id=\"password-confirmation\"\r\n      type={showPassword ? \"text\" : \"password\"}\r\n      inputRef={passwordConfirmationRef}\r\n      label=\"Confirm Password\"\r\n      variant=\"Confirm Password\"\r\n      endAdornment={\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            aria-label=\"toggle password visibility\"\r\n            onClick={() => setShowPassword(!showPassword)}\r\n            onMouseDown={() => setShowPassword(!showPassword)}\r\n            edge=\"end\"\r\n          >\r\n            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      }\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <Box\r\n            sx={{\r\n              marginTop: 8,\r\n              padding: \"10,10\",\r\n              display: \"block\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            {/* ###########new cod induced */}\r\n            <div className=\"flex items-center\">\r\n              <Container maxWidth=\"xl\">\r\n                <div className=\"left-px:100px\"></div>\r\n                <div>\r\n                  <Card sx={{ boxShadow: 4, maxWidth: \"md\" }}>\r\n                    <CardContent>\r\n                      <Typography component=\"h5\" variant=\"h5\" align=\"center\">\r\n                        <LockOutlinedIcon />\r\n                        Sign Up\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n                <div></div>\r\n              </Container>\r\n            </div>\r\n            <section style={{ marginTop: \"0em\" }}>\r\n              <Container maxWidth=\"md\">\r\n                <Card sx={{ boxShadow: 4, maxWidth: \"md\" }}>\r\n                  <CardContent>\r\n                    <Container maxWidth=\"sm\">\r\n                      <Typography\r\n                        variant=\"h2\"\r\n                        color=\"text.primary\"\r\n                        gutterBottom\r\n                      ></Typography>\r\n                      {errors.length > 0 ? (\r\n                        <Alert severity=\"error\" aria-live=\"assertive\">\r\n                          {errors.map((error, index) => {\r\n                            return <p key={`alert-${index}`}>{error}</p>;\r\n                          })}\r\n                        </Alert>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                      <form onSubmit={handleSubmit}>\r\n                        <FormGroup\r\n                          row={true}\r\n                          id=\"email-group\"\r\n                          sx={{ marginTop: \"1em\" }}\r\n                        >\r\n                          <FormControl fullWidth>\r\n                            {/* <InputLabel\r\n                              required\r\n                              htmlFor=\"email\"\r\n                              id=\"email-label\"\r\n                            >\r\n                              Email Address\r\n                            </InputLabel>\r\n                            <Input\r\n                              id=\"email1\"\r\n                              type=\"email\"\r\n                              inputRef={emailRef}\r\n                            /> */}\r\n\r\n                            <TextField\r\n                              id=\"email\"\r\n                              type=\"email\"\r\n                              label=\"Email Address\"\r\n                              inputRef={emailRef}\r\n                            />\r\n                            <FormHelperText id=\"email-helper-text\">\r\n                              We&apos;ll never share your email.\r\n                            </FormHelperText>\r\n                          </FormControl>\r\n                        </FormGroup>\r\n                        <FormGroup\r\n                          row={true}\r\n                          id=\"password-group\"\r\n                          sx={{ marginTop: \"1em\" }}\r\n                        >\r\n                          <FormControl fullWidth>\r\n                            <InputLabel\r\n                              required\r\n                              htmlFor=\"password\"\r\n                              id=\"password-label\"\r\n                            >\r\n                              Password\r\n                            </InputLabel>\r\n                            {passwordInput}-\r\n                          </FormControl>\r\n                        </FormGroup>\r\n                        <FormGroup\r\n                          row={true}\r\n                          id=\"password-confirmation-group\"\r\n                          sx={{ marginTop: \"1em\" }}\r\n                        >\r\n                          <FormControl fullWidth>\r\n                            <InputLabel\r\n                              required\r\n                              htmlFor=\"password-confirmation\"\r\n                              id=\"password-confirmation-label\"\r\n                            >\r\n                              Password Confirmation\r\n                            </InputLabel>\r\n                            {passwordConfirmationInput}\r\n                          </FormControl>\r\n                        </FormGroup>\r\n                        <FormGroup\r\n                          row={true}\r\n                          id=\"submit-group\"\r\n                          sx={{ marginTop: \"1em\" }}\r\n                        >\r\n                          <FormControl fullWidth>\r\n                            <Button\r\n                              disabled={loading}\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              type=\"submit\"\r\n                              id=\"submit-button\"\r\n                            >\r\n                              Create Account\r\n                            </Button>\r\n                          </FormControl>\r\n                        </FormGroup>\r\n                      </form>\r\n                    </Container>\r\n                  </CardContent>\r\n                  <Divider light={false} />\r\n                  <CardActions\r\n                    sx={{ marginTop: \"1em\", justifyContent: \"center\" }}\r\n                    disableSpacing\r\n                  >\r\n                    <Box>\r\n                      Already have an account? <Link to=\"/login\">Login!</Link>\r\n                    </Box>\r\n                  </CardActions>\r\n                </Card>\r\n              </Container>\r\n            </section>\r\n\r\n            {/* ##############end  */}\r\n          </Box>\r\n        </Container>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\PersistLogin.tsx",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\Logout.tsx",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\UpdateProfile.tsx",["115","116","117","118","119","120","121","122"],[],"import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Container,\r\n  Divider,\r\n  FormControl,\r\n  FormGroup,\r\n  FormHelperText,\r\n  IconButton,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { RootState } from \"../../store\";\r\nimport { resetErrorState, signUpUser, updateProfile } from \"./sessionSlice\";\r\n\r\nfunction UpdateProfile() {\r\n  const emailRef = useRef<HTMLInputElement>();\r\n  const emailConfirmationRef = useRef<HTMLInputElement>();\r\n  const passwordRef = useRef<HTMLInputElement>();\r\n  const passwordConfirmationRef = useRef<HTMLInputElement>();\r\n  const currentPasswordRef = useRef<HTMLInputElement>();\r\n\r\n  const accessToken = useSelector(\r\n    (state: RootState) => state.session.accessToken\r\n  );\r\n  const errorMessages = useSelector(\r\n    (state: RootState) => state.session.errorMessages\r\n  );\r\n\r\n  const [errors, setErrors] = useState<Array<string>>([]);\r\n  const [showPassword, setShowPassword] = useState<boolean>(false);\r\n  const [showCurrentPassword, setShowCurrentPassword] =\r\n    useState<boolean>(false);\r\n  const loading = false;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    emailRef?.current?.focus();\r\n    if (errorMessages !== undefined) {\r\n      setErrors(errorMessages);\r\n      dispatch(resetErrorState());\r\n    }\r\n  }, []);\r\n\r\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    setErrors([]);\r\n    const shouldUpdateEmail =\r\n      emailRef?.current !== undefined && emailRef?.current?.value !== \"\";\r\n    const shouldUpdatePassword =\r\n      passwordRef?.current !== undefined && passwordRef?.current?.value !== \"\";\r\n    const shouldUpdateProfile = shouldUpdateEmail || shouldUpdatePassword;\r\n    if (!shouldUpdateProfile) {\r\n      navigate(\"/\");\r\n    }\r\n    if (shouldUpdateEmail) {\r\n      if (emailRef?.current?.value !== emailConfirmationRef?.current?.value) {\r\n        setErrors([\"Emails do not match\"]);\r\n      }\r\n    }\r\n\r\n    if (shouldUpdatePassword) {\r\n      if (\r\n        passwordRef?.current?.value !== passwordConfirmationRef?.current?.value\r\n      ) {\r\n        setErrors((errors) => [...errors, \"Passwords do not match\"]);\r\n      }\r\n    }\r\n    if (\r\n      currentPasswordRef?.current?.value === undefined ||\r\n      currentPasswordRef.current.value === \"\"\r\n    ) {\r\n      setErrors((errors) => [\r\n        ...errors,\r\n        \"Please enter your current password to confirm your changes\",\r\n      ]);\r\n    }\r\n    if (errors.length > 0) {\r\n      return errors;\r\n    }\r\n\r\n    const payload = {\r\n      email: emailRef?.current?.value,\r\n      token: accessToken,\r\n      password: passwordRef?.current?.value,\r\n      currentPassword: currentPasswordRef!.current!.value,\r\n    };\r\n    const response = (await dispatch(updateProfile(payload))) as any;\r\n\r\n    console.log(response);\r\n    if (response.error) {\r\n      return setErrors(response.error);\r\n    } else {\r\n      navigate(\"/\");\r\n    }\r\n  }\r\n\r\n  const passwordInput = (\r\n    <OutlinedInput\r\n      id=\"password\"\r\n      label=\"Password\"\r\n      variant=\"Password\"\r\n      type={showPassword ? \"text\" : \"password\"}\r\n      inputRef={passwordRef}\r\n      endAdornment={\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            aria-label=\"toggle password visibility\"\r\n            onClick={() => setShowPassword(!showPassword)}\r\n            onMouseDown={() => setShowPassword(!showPassword)}\r\n            edge=\"end\"\r\n          >\r\n            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      }\r\n    />\r\n  );\r\n\r\n  const passwordConfirmationInput = (\r\n    <OutlinedInput\r\n      id=\"password-confirmation\"\r\n      label=\"Password Confirmation\"\r\n      variant=\"Password Confirmation\"\r\n      type={showPassword ? \"text\" : \"password\"}\r\n      inputRef={passwordConfirmationRef}\r\n      endAdornment={\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            aria-label=\"toggle password visibility\"\r\n            onClick={() => setShowPassword(!showPassword)}\r\n            onMouseDown={() => setShowPassword(!showPassword)}\r\n            edge=\"end\"\r\n          >\r\n            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      }\r\n    />\r\n  );\r\n\r\n  const currentPasswordInput = (\r\n    <OutlinedInput\r\n      id=\"current-password-confirmation\"\r\n      label=\"Current Password\"\r\n      variant=\"Current Password\"\r\n      type={showCurrentPassword ? \"text\" : \"password\"}\r\n      inputRef={currentPasswordRef}\r\n      endAdornment={\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            aria-label=\"toggle password visibility\"\r\n            onClick={() => setShowCurrentPassword(!showCurrentPassword)}\r\n            onMouseDown={() => setShowCurrentPassword(!showCurrentPassword)}\r\n            edge=\"end\"\r\n          >\r\n            {showCurrentPassword ? <Visibility /> : <VisibilityOff />}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      }\r\n    />\r\n  );\r\n\r\n  return (\r\n    <section style={{ marginTop: \"2em\" }}>\r\n      <Container maxWidth=\"md\">\r\n        <Card sx={{ boxShadow: 1, maxWidth: \"md\" }}>\r\n          <CardContent>\r\n            <Container maxWidth=\"sm\">\r\n              <Typography variant=\"h2\" color=\"text.primary\" gutterBottom>\r\n                Update Profile\r\n              </Typography>\r\n              {errors.length > 0 ? (\r\n                <Alert severity=\"error\" aria-live=\"assertive\">\r\n                  {errors.map((error, index) => {\r\n                    return <p key={`alert-${index}`}>{error}</p>;\r\n                  })}\r\n                </Alert>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <form onSubmit={handleSubmit}>\r\n                <FormGroup\r\n                  row={true}\r\n                  id=\"email-group\"\r\n                  sx={{ marginTop: \"1em\" }}\r\n                >\r\n                  <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"email\" id=\"email-label\">\r\n                      Email Address\r\n                    </InputLabel>\r\n                    <Input id=\"email\" type=\"email\" inputRef={emailRef} />\r\n                    <FormHelperText id=\"email-helper-text\">\r\n                      Enter current email\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                </FormGroup>\r\n                <FormGroup\r\n                  row={true}\r\n                  id=\"email-confirmation-group\"\r\n                  sx={{ marginTop: \"1em\" }}\r\n                >\r\n                  <FormControl fullWidth>\r\n                    <InputLabel\r\n                      htmlFor=\"email-confirmation\"\r\n                      id=\"email-confirmation-label\"\r\n                    >\r\n                      Email Address Confirmation\r\n                    </InputLabel>\r\n                    <Input\r\n                      id=\"email-confirmation\"\r\n                      type=\"email\"\r\n                      inputRef={emailConfirmationRef}\r\n                    />\r\n                    <FormHelperText id=\"email-confirmation-helper-text\">\r\n                      Enter new email again\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                </FormGroup>\r\n                <FormGroup\r\n                  row={true}\r\n                  id=\"password-group\"\r\n                  sx={{ marginTop: \"1em\" }}\r\n                >\r\n                  <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"password\" id=\"password-label\">\r\n                      Password\r\n                    </InputLabel>\r\n                    {passwordInput}\r\n                  </FormControl>\r\n                </FormGroup>\r\n                <FormGroup\r\n                  row={true}\r\n                  id=\"password-confirmation-group\"\r\n                  sx={{ marginTop: \"1em\" }}\r\n                >\r\n                  <FormControl fullWidth>\r\n                    <InputLabel\r\n                      htmlFor=\"password-confirmation\"\r\n                      id=\"password-confirmation-label\"\r\n                    >\r\n                      Password Confirmation\r\n                    </InputLabel>\r\n                    {passwordConfirmationInput}\r\n                  </FormControl>\r\n                </FormGroup>\r\n                <FormGroup\r\n                  row={true}\r\n                  id=\"current-password-group\"\r\n                  sx={{ marginTop: \"1em\" }}\r\n                >\r\n                  <FormControl fullWidth>\r\n                    <InputLabel\r\n                      required\r\n                      htmlFor=\"current-password\"\r\n                      id=\"current-password-label\"\r\n                    >\r\n                      Current Password\r\n                    </InputLabel>\r\n                    {currentPasswordInput}\r\n                  </FormControl>\r\n                </FormGroup>\r\n                <FormGroup\r\n                  row={true}\r\n                  id=\"submit-group\"\r\n                  sx={{ marginTop: \"1em\" }}\r\n                >\r\n                  <FormControl fullWidth>\r\n                    <Button\r\n                      disabled={loading}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      id=\"submit-button\"\r\n                    >\r\n                      Save Changes\r\n                    </Button>\r\n                  </FormControl>\r\n                </FormGroup>\r\n              </form>\r\n            </Container>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default UpdateProfile;\r\n","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\sessions\\sessionSlice.tsx",["123","124","125","126","127","128"],[],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { createUserWithEmailAndPassword, getCurrentUser, loginWithEmailAndPassword, logoutUserWithToken, requestAccessTokenWithRefreshToken, updateUserProfile } from \"../../api/sessionAPI\";\r\nimport { RootState, AppThunk } from \"../../store\";\r\n\r\n\r\nexport interface User {\r\n  id?: string;\r\n  email?: string;\r\n  role?: string;\r\n  createdAt?: string;\r\n}\r\n\r\nexport interface UserLoginData {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface UserUpdateData {\r\n  currentPassword: string;\r\n  token: string | undefined;\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\ninterface AuthState {\r\n  currentUser?: User;\r\n  loading: boolean;\r\n  error: boolean;\r\n  errorMessages: string[];\r\n  accessToken?: string;\r\n  refreshToken?: string | null;\r\n  expiresIn?: number;\r\n  tokenType?: string;\r\n  currentRoute?: string;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  currentUser: { \r\n    id: undefined,\r\n    email: undefined,\r\n    role: undefined,\r\n    createdAt: undefined\r\n  },\r\n  loading: true,\r\n  error: false,\r\n  errorMessages: [],\r\n  accessToken: undefined,\r\n  refreshToken: getRefreshToken(),\r\n  expiresIn: undefined,\r\n  tokenType: undefined\r\n}\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const signUpUser = createAsyncThunk(\r\n  \"session/signUpUser\",\r\n  async (payload: UserLoginData, { rejectWithValue }) => {\r\n    const response = await createUserWithEmailAndPassword(\r\n      payload.email, \r\n      payload.password\r\n      );\r\n    if (response.errors) {\r\n      // The value we return becomes the `rejected` action payload\r\n      return rejectWithValue(response);\r\n    }\r\n    \r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const updateProfile = createAsyncThunk(\r\n  \"session/updateProfile\",\r\n  async (payload: UserUpdateData, { rejectWithValue }) => {\r\n    const response = await updateUserProfile(\r\n      payload.currentPassword,\r\n      payload.token,\r\n      payload?.email,\r\n      payload?.password\r\n    );\r\n    if (response.errors) {\r\n      // The value we return becomes the `rejected` action payload\r\n      return rejectWithValue(response);\r\n    }\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const loginUser = createAsyncThunk(\r\n  \"session/loginUser\",\r\n  async (payload: UserLoginData, { rejectWithValue }) => {\r\n    const loginResponse = await loginWithEmailAndPassword(\r\n      payload.email,\r\n      payload.password\r\n    );\r\n    if (loginResponse.error) {\r\n      // The value we return becomes the `rejected` action payload\r\n      return rejectWithValue(loginResponse);\r\n    }\r\n    const userResponse = await getCurrentUser(loginResponse.access_token);\r\n    if (userResponse.error) {\r\n      // The value we return becomes the `rejected` action payload\r\n      return rejectWithValue(userResponse.data);\r\n    }\r\n    const response = {\r\n      ...loginResponse,\r\n      ...userResponse,\r\n    };\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const logoutUser = createAsyncThunk(\r\n  \"session/logoutUser\",\r\n  async (payload: string, { rejectWithValue }) => {\r\n    const response = await logoutUserWithToken(payload);\r\n    // if response has errors rejectwithvalue\r\n    console.log(response);\r\n    if (response.error) {\r\n      // The value we return becomes the `rejected` action payload\r\n      return rejectWithValue(response);\r\n    }\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const refreshAccessToken = createAsyncThunk(\r\n  \"session/refreshAccessToken\",\r\n  async (refreshToken: string | undefined | null, { rejectWithValue }) => {\r\n    if (!refreshToken) {\r\n      return rejectWithValue(\"No refresh token\");\r\n    }\r\n\r\n    const refreshResponse = await requestAccessTokenWithRefreshToken(\r\n      refreshToken\r\n    );\r\n    if (refreshResponse.error) {\r\n      // The value we return becomes the `rejected` action payload\r\n      return rejectWithValue(refreshResponse.data);\r\n    }\r\n    const userResponse = await getCurrentUser(refreshResponse.access_token);\r\n    if (userResponse.error) {\r\n      // The value we return becomes the `rejected` action payload\r\n      return rejectWithValue(userResponse.data);\r\n    }\r\n    const response = {\r\n      ...refreshResponse,\r\n      ...userResponse,\r\n    };\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response;\r\n  }\r\n);\r\n\r\n\r\n\r\nexport const sessionSlice = createSlice({\r\n  name: \"session\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    resetErrorState: (state) => {\r\n      state.error = false;\r\n      state.errorMessages = [];\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(signUpUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(signUpUser.fulfilled, (state, action: any) => {\r\n        state.accessToken = action.payload.access_token;\r\n        state.refreshToken = action.payload.refresh_token;\r\n        state.expiresIn = action.payload.expires_in;\r\n        state.tokenType = action.payload.token_type;\r\n        state.currentUser = {\r\n          id: action.payload.id,\r\n          email: action.payload.email,\r\n          role: action.payload.role,\r\n          createdAt: action.payload.created_at,\r\n        };\r\n        storeRefreshToken(action.payload.refresh_token);\r\n\r\n        state.loading = false;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(signUpUser.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = true;\r\n        state.errorMessages = action.payload.errors;\r\n      }).addCase(loginUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action: any) => {\r\n        state.accessToken = action.payload.access_token;\r\n        state.refreshToken = action.payload.refresh_token;\r\n        state.expiresIn = action.payload.expires_in;\r\n        state.currentUser = {\r\n          id: action.payload.id,\r\n          email: action.payload.email,\r\n          role: action.payload.role,\r\n          createdAt: action.payload.created_at,\r\n        };\r\n        storeRefreshToken(action.payload.refresh_token);\r\n\r\n        state.loading = false;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(loginUser.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = true;\r\n        state.errorMessages = [\"Invalid credentials. Did you enter them correctly?\"];\r\n      }).addCase(refreshAccessToken.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(refreshAccessToken.fulfilled, (state, action: any) => {\r\n        state.accessToken = action.payload.access_token;\r\n        state.refreshToken = action.payload.refresh_token;\r\n        state.expiresIn = action.payload.expires_in;\r\n        state.currentUser = {\r\n          id: action.payload.id,\r\n          email: action.payload.email,\r\n          role: action.payload.role,\r\n          createdAt: action.payload.created_at,\r\n        };\r\n        storeRefreshToken(action.payload.refresh_token);\r\n\r\n        state.loading = false;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(refreshAccessToken.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = true;\r\n      })\r\n      .addCase(logoutUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(logoutUser.fulfilled, (state, action: any) => {\r\n        state.currentUser = {\r\n          id: undefined,\r\n          email: undefined,\r\n          role: undefined,\r\n          createdAt: undefined,\r\n        };\r\n        state.accessToken = undefined;\r\n        state.refreshToken = undefined;\r\n        state.expiresIn = undefined;\r\n        state.tokenType = undefined;\r\n        removeRefreshToken();\r\n\r\n        state.loading = false;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(logoutUser.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = true;\r\n        state.errorMessages = [action.payload.error];\r\n      })\r\n      .addCase(updateProfile.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(updateProfile.fulfilled, (state, action: any) => {\r\n        state.accessToken = action.payload.access_token;\r\n        state.refreshToken = action.payload.refresh_token;\r\n        state.expiresIn = action.payload.expires_in;\r\n        state.tokenType = action.payload.token_type;\r\n        state.currentUser = {\r\n          id: action.payload.id,\r\n          email: action.payload.email,\r\n          role: action.payload.role,\r\n          createdAt: action.payload.created_at,\r\n        };\r\n        storeRefreshToken(action.payload.refresh_token);\r\n\r\n        state.loading = false;\r\n        state.error = false;\r\n        state.errorMessages = [];\r\n      })\r\n      .addCase(updateProfile.rejected, (state, action: any) => {\r\n        state.loading = false;\r\n        state.error = true;\r\n        state.errorMessages = action.payload.errors;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { resetErrorState } = sessionSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\n// export const selectCount = (state: RootState) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\n\r\nexport default sessionSlice.reducer;\r\n\r\nfunction storeRefreshToken(token: string) {\r\n  localStorage.setItem(\"refreshToken\", token);\r\n}\r\n\r\nfunction removeRefreshToken() {\r\n  localStorage.removeItem(\"refreshToken\");\r\n}\r\n\r\nfunction getRefreshToken() {\r\n  return localStorage.getItem(\"refreshToken\");\r\n}","C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\counter\\counterSlice.ts",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\api\\sessionAPI.ts",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\features\\counter\\counterAPI.ts",[],[],"C:\\ruby_prg\\7\\react-wishlist-series\\frontend\\src\\app\\api\\axios.ts",[],[],{"ruleId":"129","severity":1,"message":"130","line":19,"column":7,"nodeType":"131","messageId":"132","endLine":19,"endColumn":15},{"ruleId":"129","severity":1,"message":"133","line":5,"column":9,"nodeType":"131","messageId":"132","endLine":5,"endColumn":20},{"ruleId":"129","severity":1,"message":"134","line":8,"column":9,"nodeType":"131","messageId":"132","endLine":8,"endColumn":20},{"ruleId":"129","severity":1,"message":"135","line":11,"column":9,"nodeType":"131","messageId":"132","endLine":11,"endColumn":21},{"ruleId":"129","severity":1,"message":"136","line":26,"column":8,"nodeType":"131","messageId":"132","endLine":26,"endColumn":14},{"ruleId":"129","severity":1,"message":"137","line":28,"column":8,"nodeType":"131","messageId":"132","endLine":28,"endColumn":17},{"ruleId":"129","severity":1,"message":"138","line":29,"column":8,"nodeType":"131","messageId":"132","endLine":29,"endColumn":24},{"ruleId":"129","severity":1,"message":"139","line":30,"column":8,"nodeType":"131","messageId":"132","endLine":30,"endColumn":16},{"ruleId":"129","severity":1,"message":"140","line":31,"column":8,"nodeType":"131","messageId":"132","endLine":31,"endColumn":12},{"ruleId":"129","severity":1,"message":"141","line":36,"column":10,"nodeType":"131","messageId":"132","endLine":36,"endColumn":15},{"ruleId":"129","severity":1,"message":"142","line":15,"column":3,"nodeType":"131","messageId":"132","endLine":15,"endColumn":8},{"ruleId":"129","severity":1,"message":"143","line":23,"column":16,"nodeType":"131","messageId":"132","endLine":23,"endColumn":27},{"ruleId":"129","severity":1,"message":"136","line":27,"column":8,"nodeType":"131","messageId":"132","endLine":27,"endColumn":14},{"ruleId":"129","severity":1,"message":"138","line":31,"column":8,"nodeType":"131","messageId":"132","endLine":31,"endColumn":24},{"ruleId":"129","severity":1,"message":"139","line":32,"column":8,"nodeType":"131","messageId":"132","endLine":32,"endColumn":16},{"ruleId":"129","severity":1,"message":"140","line":34,"column":8,"nodeType":"131","messageId":"132","endLine":34,"endColumn":12},{"ruleId":"129","severity":1,"message":"144","line":4,"column":3,"nodeType":"131","messageId":"132","endLine":4,"endColumn":6},{"ruleId":"129","severity":1,"message":"145","line":7,"column":3,"nodeType":"131","messageId":"132","endLine":7,"endColumn":14},{"ruleId":"129","severity":1,"message":"146","line":10,"column":3,"nodeType":"131","messageId":"132","endLine":10,"endColumn":10},{"ruleId":"129","severity":1,"message":"147","line":23,"column":10,"nodeType":"131","messageId":"132","endLine":23,"endColumn":14},{"ruleId":"129","severity":1,"message":"143","line":23,"column":16,"nodeType":"131","messageId":"132","endLine":23,"endColumn":27},{"ruleId":"129","severity":1,"message":"148","line":25,"column":27,"nodeType":"131","messageId":"132","endLine":25,"endColumn":37},{"ruleId":"149","severity":1,"message":"150","line":98,"column":24,"nodeType":"151","messageId":"152","endLine":98,"endColumn":52,"suggestions":"153"},{"ruleId":"149","severity":1,"message":"150","line":98,"column":24,"nodeType":"151","messageId":"152","endLine":98,"endColumn":43,"suggestions":"154"},{"ruleId":"129","severity":1,"message":"155","line":1,"column":41,"nodeType":"131","messageId":"132","endLine":1,"endColumn":54},{"ruleId":"129","severity":1,"message":"156","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":19},{"ruleId":"129","severity":1,"message":"157","line":3,"column":21,"nodeType":"131","messageId":"132","endLine":3,"endColumn":29},{"ruleId":"129","severity":1,"message":"158","line":224,"column":44,"nodeType":"131","messageId":"132","endLine":224,"endColumn":55},{"ruleId":"129","severity":1,"message":"158","line":249,"column":53,"nodeType":"131","messageId":"132","endLine":249,"endColumn":64},{"ruleId":"129","severity":1,"message":"158","line":258,"column":46,"nodeType":"131","messageId":"132","endLine":258,"endColumn":57},"@typescript-eslint/no-unused-vars","'settings' is assigned a value but never used.","Identifier","unusedVar","'currentUser' is assigned a value but never used.","'accessToken' is assigned a value but never used.","'refreshToken' is assigned a value but never used.","'Avatar' is defined but never used.","'TextField' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Grid' is defined but never used.","'green' is defined but never used.","'Input' is defined but never used.","'useLocation' is defined but never used.","'Box' is defined but never used.","'CardActions' is defined but never used.","'Divider' is defined but never used.","'Link' is defined but never used.","'signUpUser' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["159"],["160"],"'PayloadAction' is defined but never used.","'RootState' is defined but never used.","'AppThunk' is defined but never used.","'action' is defined but never used.",{"messageId":"161","fix":"162","desc":"163"},{"messageId":"161","fix":"164","desc":"163"},"suggestOptionalChain",{"range":"165","text":"166"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"167","text":"166"},[3034,3035],"?",[3025,3026]]