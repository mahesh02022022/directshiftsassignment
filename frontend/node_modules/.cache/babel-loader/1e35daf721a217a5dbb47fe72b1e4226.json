{"ast":null,"code":"var _jsxFileName = \"C:\\\\ruby_prg\\\\7\\\\react-wishlist-series\\\\frontend\\\\src\\\\app\\\\features\\\\routes\\\\PublicOnlyRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PublicOnlyRoute(_ref) {\n  _s();\n\n  var _location$state;\n\n  let {\n    children\n  } = _ref;\n  const accessToken = useSelector(state => state.session.accessToken);\n  const loading = useSelector(state => state.session.loading);\n  const location = useLocation();\n  const fromLocation = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.from;\n  const previousLocation = fromLocation ? fromLocation : {\n    pathname: '/'\n  };\n\n  if (!accessToken && !loading) {\n    return children;\n  } else if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 14\n    }, this);\n  } else if (accessToken && !loading) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: previousLocation,\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Something went wrong\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 14\n    }, this);\n  }\n}\n\n_s(PublicOnlyRoute, \"VXTc6na+zTfg92qBsAyjG8SK86U=\", false, function () {\n  return [useSelector, useSelector, useLocation];\n});\n\n_c = PublicOnlyRoute;\nexport default PublicOnlyRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicOnlyRoute\");","map":{"version":3,"sources":["C:/ruby_prg/7/react-wishlist-series/frontend/src/app/features/routes/PublicOnlyRoute.tsx"],"names":["React","useSelector","Navigate","useLocation","PublicOnlyRoute","children","accessToken","state","session","loading","location","fromLocation","from","previousLocation","pathname"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;;;AAGA,SAASC,eAAT,OAA8C;AAAA;;AAAA;;AAAA,MAArB;AAAEC,IAAAA;AAAF,GAAqB;AAC5C,QAAMC,WAAW,GAAGL,WAAW,CAAEM,KAAD,IAAuBA,KAAK,CAACC,OAAN,CAAcF,WAAtC,CAA/B;AACA,QAAMG,OAAO,GAAGR,WAAW,CAAEM,KAAD,IAAuBA,KAAK,CAACC,OAAN,CAAcC,OAAtC,CAA3B;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,YAAY,sBAAID,QAAQ,CAACH,KAAb,oDAAG,gBAAyBK,IAA9C;AACA,QAAMC,gBAAgB,GAAGF,YAAY,GAAGA,YAAH,GAAkB;AAAEG,IAAAA,QAAQ,EAAE;AAAZ,GAAvD;;AAEA,MAAI,CAACR,WAAD,IAAgB,CAACG,OAArB,EAA8B;AAC1B,WAAOJ,QAAP;AACH,GAFD,MAEO,IAAII,OAAJ,EAAa;AAChB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA,IAAIH,WAAW,IAAI,CAACG,OAApB,EAA6B;AAClC,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAEI,gBAAd;AAAgC,MAAA,KAAK,EAAE;AAACD,QAAAA,IAAI,EAAEF;AAAP,OAAvC;AAAyD,MAAA,OAAO;AAAhE;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACH,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACF;;GAhBQN,e;UACaH,W,EACJA,W,EACCE,W;;;KAHVC,e;AAkBT,eAAeA,eAAf","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { RootState } from '../../store';\r\n\r\nfunction PublicOnlyRoute({ children  } : any) {\r\n  const accessToken = useSelector((state : RootState) => state.session.accessToken); \r\n  const loading = useSelector((state : RootState) => state.session.loading);\r\n  const location = useLocation();\r\n  const fromLocation = (location.state as any)?.from;\r\n  const previousLocation = fromLocation ? fromLocation : { pathname: '/'};\r\n\r\n  if (!accessToken && !loading) {\r\n      return children;\r\n  } else if (loading) {\r\n      return <p>Loading...</p>;\r\n  } else if (accessToken && !loading) {\r\n    return <Navigate to={previousLocation} state={{from: location}} replace/>;\r\n  } else {\r\n      return <p>Something went wrong</p>;\r\n  }\r\n}\r\n\r\nexport default PublicOnlyRoute"]},"metadata":{},"sourceType":"module"}